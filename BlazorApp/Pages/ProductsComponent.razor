
@page "/products"
@attribute [Authorize(Policy ="AdminOnly")]

@using UseCases
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase  GetCategoryByIdUseCase
@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase
@inject IViewProductsUseCase  ViewProductsUseCase
<h3>Products</h3>
<br>
@if(products!=null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                  <td></td>
                   <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {

                <tr> 
                    <td>@GetCategoryByIdUseCase.Execute(@product.CategoryId.Value)?.Name</td>
                    <td>@product.Name</td>
                    <td>@(Math.Round(product.Price.Value, 2))</td>
                     <td>@product.Quantity</td>
                    <td><button type="button" @onclick="@(()=>EditProduct(product))" class="btn btn-link">Edit</button></td>
               <td><button type="button" @onclick="@(()=>DeleteProduct(product))" class="btn btn-link">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

}
<br />
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary"> Add Product</button>




@code {
    private IEnumerable<Product> products;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        products = ViewProductsUseCase.Execute();
    }
    void  OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }
    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.CategoryId}");
    }
    private void DeleteProduct(Product product )
    {
        DeleteProductUseCase.Execute(product);
        LoadProduct();
    }
       private void LoadProduct()
    {
        products = ViewProductsUseCase.Execute()?.ToList();
    }

}
